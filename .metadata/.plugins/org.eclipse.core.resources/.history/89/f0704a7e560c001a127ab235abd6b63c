package com.Sgic.DefectTracker.DefectService.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.Sgic.DefectTracker.DefectService.Exception.ResourceNotFoundException;
import com.Sgic.DefectTracker.DefectService.entities.DefectEntity;
import com.Sgic.DefectTracker.DefectService.entities.ResourceAllocation;
import com.Sgic.DefectTracker.DefectService.services.DefectService;
import com.Sgic.DefectTracker.DefectService.services.ResourceAllocationService;


	@RestController
	@RequestMapping("/api/v1")
	public class ResourceAllocationController {

		@Autowired
		ResourceAllocationService resourceAllocationService;

		@PostMapping(value = "/resource")
		public ResponseEntity<?> createResourceAllocation(@RequestBody ResourceAllocation resource) {
			resourceAllocationService.createResourceAllocation(resource);
			return new ResponseEntity<Object>(HttpStatus.OK);
		}

		@GetMapping("/resource")
		public ResponseEntity<List<ResourceAllocation>> getResourceAllocation() {
			return new ResponseEntity<List<ResourceAllocation>>(resourceAllocationService.getResourceAllocation(), HttpStatus.OK);
		}

		@GetMapping("/getresourceById/{id}")
		public ResponseEntity<DefectEntity> getDefectEntityById(@PathVariable(value = "id") Long id)
				throws ResourceNotFoundException {
			DefectEntity resource = resourceAllocationService.getDefectEntityById(id)
					.orElseThrow(() -> new ResourceNotFoundException("DefectEntity not found for this id :: " + id));
			return ResponseEntity.ok().body(resource);
		}

		@DeleteMapping("/resource/{id}")
		public ResponseEntity<?> deleteDefectEntity(@PathVariable Long id) {
			resourceAllocationService.deleteDefectEntity(id);
			return new ResponseEntity<String>("DefectEntity successfully deleted", HttpStatus.OK);
		}

		@PutMapping("/updateresource/{id}")
		public ResponseEntity<Object> editDefectEntity(@RequestBody DefectEntity resource,
				@PathVariable("id") Long id) {

			Optional<DefectEntity> resourceOptional = resourceAllocationService.getDefectEntityById(id);

			if (!resourceOptional.isPresent())
				return new ResponseEntity<>("DefectEntity not found for this id", HttpStatus.NOT_FOUND);

			resource.setDefectId(id);

			resourceAllocationService.createDefectEntity(resource);

			return new ResponseEntity<>("Severity successfully updated", HttpStatus.OK);
		}
}
